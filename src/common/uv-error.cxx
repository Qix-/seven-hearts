#include "codedocs.h"
#include "uv.h"

#include "log.hxx"

#define ERR(n) case n: return #n

uses const char* uv_get_error_name(int err) {
	switch (err) {
	ERR(UV_E2BIG);
	ERR(UV_EACCES);
	ERR(UV_EADDRINUSE);
	ERR(UV_EADDRNOTAVAIL);
	ERR(UV_EAFNOSUPPORT);
	ERR(UV_EAGAIN);
	ERR(UV_EAI_ADDRFAMILY);
	ERR(UV_EAI_AGAIN);
	ERR(UV_EAI_BADFLAGS);
	ERR(UV_EAI_BADHINTS);
	ERR(UV_EAI_CANCELED);
	ERR(UV_EAI_FAIL);
	ERR(UV_EAI_FAMILY);
	ERR(UV_EAI_MEMORY);
	ERR(UV_EAI_NODATA);
	ERR(UV_EAI_NONAME);
	ERR(UV_EAI_OVERFLOW);
	ERR(UV_EAI_PROTOCOL);
	ERR(UV_EAI_SERVICE);
	ERR(UV_EAI_SOCKTYPE);
	ERR(UV_EALREADY);
	ERR(UV_EBADF);
	ERR(UV_EBUSY);
	ERR(UV_ECANCELED);
	ERR(UV_ECHARSET);
	ERR(UV_ECONNABORTED);
	ERR(UV_ECONNREFUSED);
	ERR(UV_ECONNRESET);
	ERR(UV_EDESTADDRREQ);
	ERR(UV_EEXIST);
	ERR(UV_EFAULT);
	ERR(UV_EFBIG);
	ERR(UV_EHOSTUNREACH);
	ERR(UV_EINTR);
	ERR(UV_EINVAL);
	ERR(UV_EIO);
	ERR(UV_EISCONN);
	ERR(UV_EISDIR);
	ERR(UV_ELOOP);
	ERR(UV_EMFILE);
	ERR(UV_EMSGSIZE);
	ERR(UV_ENAMETOOLONG);
	ERR(UV_ENETDOWN);
	ERR(UV_ENETUNREACH);
	ERR(UV_ENFILE);
	ERR(UV_ENOBUFS);
	ERR(UV_ENODEV);
	ERR(UV_ENOENT);
	ERR(UV_ENOMEM);
	ERR(UV_ENONET);
	ERR(UV_ENOPROTOOPT);
	ERR(UV_ENOSPC);
	ERR(UV_ENOSYS);
	ERR(UV_ENOTCONN);
	ERR(UV_ENOTDIR);
	ERR(UV_ENOTEMPTY);
	ERR(UV_ENOTSOCK);
	ERR(UV_ENOTSUP);
	ERR(UV_EPERM);
	ERR(UV_EPIPE);
	ERR(UV_EPROTO);
	ERR(UV_EPROTONOSUPPORT);
	ERR(UV_EPROTOTYPE);
	ERR(UV_ERANGE);
	ERR(UV_EROFS);
	ERR(UV_ESHUTDOWN);
	ERR(UV_ESPIPE);
	ERR(UV_ESRCH);
	ERR(UV_ETIMEDOUT);
	ERR(UV_ETXTBSY);
	ERR(UV_EXDEV);
	ERR(UV_UNKNOWN);
	ERR(UV_EOF);
	ERR(UV_ENXIO);
	ERR(UV_EMLINK);
	default: return "unknown error";
	}
}
